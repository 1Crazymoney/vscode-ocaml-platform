{
  "lambda": {
    "prefix": "fun",
    "body": ["(${1:pattern}) => ${2:${1:pattern}}"]
  },
  "lambda (switch)": {
    "prefix": "fun",
    "body": ["fun", "\t| ${1:pattern} => ${2:${1:pattern}}", "\t;"]
  },
  "let .. in": {
    "prefix": "let",
    "body": ["let ${1:pattern} = ${2:()} in$0"]
  },
  "function": {
    "prefix": "func",
    "body": ["function\n| $0"]
  },
  "variant pattern": {
    "prefix": "|",
    "body": ["| ${1:_} -> $0"]
  },
  "let": {
    "prefix": "let",
    "body": ["let ${1:pattern} = {", "\t$0", "};"]
  },
  "val": {
    "prefix": "val",
    "body": ["val ${1:name} : $0"]
  },
  "sig": {
    "prefix": "sig",
    "body": ["sig ${0} end"]
  },
  "module": {
    "prefix": "module",
    "body": ["module ${1:M} struct = ${2:{}}\nend$0"]
  },
  "module (block)": {
    "prefix": "module",
    "body": ["module ${1:M} = {", "\t$0", "};"]
  },
  "module function": {
    "prefix": "module",
    "body": ["module ${1:M} = (${2:X}: $3{:{}}) => ${4:${2:X}};$0"]
  },
  "match": {
    "prefix": "match",
    "body": [
      "match ${1:scrutinee} with",
      "| ${2:pattern} => ${3:${2:pattern}}",
      ""
    ]
  },
  "type (alias or abstract)": {
    "prefix": "type",
    "body": ["type ${1:name} ${2:${3:'${4:arg} }= ${5:'${4:arg}}}$0"]
  },
  "type": {
    "prefix": "type",
    "body": [
      "type ${1:name} ${2:'${3:arg} }=",
      "\t| ${4:Con${2: '${3:arg}}}",
      "\t"
    ]
  }
}
