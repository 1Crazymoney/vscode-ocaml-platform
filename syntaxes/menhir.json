{
  "name": "Menhir",
  "scopeName": "source.ocaml.menhir",
  "fileTypes": ["mly"],
  "patterns": [
    { "include": "#comments" },
    {
      "comment": "sequence of declarations",
      "begin": "(?=%[^%])",
      "end": "(?=%%)",
      "patterns": [{ "include": "#comments" }, { "include": "#declarations" }]
    },
    {
      "comment": "sequence of rules",
      "begin": "%%",
      "beginCaptures": [{ "name": "keyword.other.menhir" }],
      "end": "%%",
      "endCaptures": [{ "name": "keyword.other.menhir" }],
      "patterns": [{ "include": "#comments" }, { "include": "#rules" }]
    },
    { "include": "source.ocaml" }
  ],
  "repository": {
    "declarations": {
      "patterns": [
        {
          "comment": "ocaml header",
          "begin": "%{",
          "beginCaptures": [{ "name": "keyword.other.menhir" }],
          "end": "%}",
          "endCaptures": [{ "name": "keyword.other.menhir" }],
          "patterns": [{ "include": "source.ocaml" }]
        },
        {
          "comment": "builtin declaration",
          "name": "keyword.other.menhir",
          "match": "(%parameter|%token|%nonassoc|%left|%right|%type|%start|%attribute|%on_error_reduce)\\b"
        },
        {
          "comment": "ocaml type annotation for token",
          "begin": "<",
          "end": ">",
          "beginCaptures": [{ "name": "keyword.other.menhir" }],
          "endCaptures": [{ "name": "keyword.other.menhir" }],
          "patterns": [{ "include": "source.ocaml" }]
        },
        { "include": "source.ocaml#strings" }
      ]
    },

    "rules": {
      "patterns": [
        {
          "comment": "new rule syntax with optional parameter list",
          "begin": "(let)[[:space:]]*([[:lower:]][[:word:]]*)[[:space:]]*(?:\\(([^)]+)\\))?[[:space:]]*(:=|==)",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.menhir"
            },
            "2": {
              "comment": "rule name",
              "name": "entity.name.function.rule.menhir"
            },
            "3": {
              "patterns": [
                {
                  "comment": "rule parameter",
                  "name": "variable.parameter.rule.menhir",
                  "match": "[[:alpha:]][[:word:]]*"
                }
              ]
            },
            "4": {
              "name": "keyword.other.menhir"
            }
          },
          "patterns": [
            { "include": "#comments" },
            { "include": "#variables" },
            { "include": "#references" },
            { "include": "#operators" },
            { "include": "source.ocaml#strings" },
            { "include": "#actions" }
          ]
        },

        {
          "comment": "rule name with optional parameter list",
          "match": "([[:lower:]][[:word:]]*)[[:space:]]*(?:\\(([^)]+)\\))?(?=[[:space:]]*:)",
          "captures": {
            "1": {
              "comment": "rule name",
              "name": "entity.name.function.rule.menhir"
            },
            "2": {
              "patterns": [
                {
                  "comment": "rule parameter",
                  "name": "variable.parameter.rule.menhir",
                  "match": "[[:alpha:]][[:word:]]*"
                }
              ]
            }
          }
        },
        {
          "comment": "declaration for public or inline rule; precedence annotation",
          "name": "keyword.other.directive.menhir",
          "match": "%public|%inline|%prec"
        },
        {
          "comment": "production",
          "begin": ":|\\|",
          "beginCaptures": [{ "name": "keyword.other.menhir" }],
          "end": "$",
          "patterns": [
            { "include": "#comments" },
            { "include": "#variables" },
            { "include": "#references" },
            { "include": "#operators" },
            { "include": "source.ocaml#strings" },
            { "include": "#actions" }
          ]
        },
        { "include": "#actions" }
      ]
    },

    "actions": {
      "patterns": [
        {
          "comment": "ocaml semantic action",
          "begin": "{",
          "beginCaptures": [{ "name": "keyword.other.menhir" }],
          "end": "}",
          "endCaptures": [{ "name": "keyword.other.menhir" }],
          "patterns": [{ "include": "source.ocaml" }]
        },
        {
          "comment": "point-free ocaml semantic action",
          "begin": "<",
          "beginCaptures": [{ "name": "keyword.other.menhir" }],
          "end": ">",
          "endCaptures": [{ "name": "keyword.other.menhir" }],
          "patterns": [{ "include": "source.ocaml" }]
        }
      ]
    },

    "comments": {
      "patterns": [
        { "include": "source.ocaml#comments" },
        {
          "comment": "c-style block comment",
          "name": "comment.block.menhir",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "comment": "c-style line comment",
          "name": "comment.line.menhir",
          "begin": "//",
          "end": "$"
        }
      ]
    },

    "variables": {
      "comment": "labeled semantic value identifier",
      "match": "([[:lower:]_][[:word:]']*|~)[[:space:]]*(=)",
      "captures": {
        "1": { "name": "variable.parameter.value.menhir" },
        "2": { "name": "keyword.other.menhir" }
      },
      "patterns": [{ "include": "#references" }]
    },

    "references": {
      "patterns": [
        {
          "comment": "builtin standard library functions",
          "name": "support.function.rule.menhir",
          "match": "\\b(endrule|midrule|option|ioption|boption|loption|pair|separated_pair|preceded|terminated|delimited|list|nonempty_list|separated_list|separated_nonempty_list|rev|flatten|append)\\b"
        },
        {
          "comment": "reference to a token",
          "name": "entity.name.token.menhir",
          "match": "[[:upper:]][[:word:]]*"
        },
        {
          "comment": "reference to a production",
          "name": "entity.name.function.rule.menhir",
          "match": "[[:lower:]][[:word:]]*"
        }
      ]
    },

    "operators": {
      "patterns": [
        {
          "comment": "rule modifier (?, +, *)",
          "match": "[?+*]",
          "name": "keyword.operator.menhir"
        },
        {
          "comment": "vertical bar",
          "match": "\\|",
          "name": "keyword.other.menhir"
        },
        {
          "comment": "semicolon",
          "match": ";",
          "name": "keyword.other.menhir punctuation.separator.terminator punctuation.separator.semicolon"
        }
      ]
    }
  }
}
